name: JAVA CI\CD with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1. JAVA 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. Gradle 설정
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      # 3. Gradle Wrapper에 실행 권한을 부여
      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x gradlew

      # 4. Spring Boot 애플리케이션 빌드
      - name: Build specific module
        run: cd softdelete && ../gradlew clean bootJar
      # 5. Docker 이미지 빌드
      - name: Docker image build
        run: docker build -f softdelete/Dockerfile.spring -t ${{ secrets.DOCKER_USERNAME }}/spring-demo .

      # 6. Docker
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      # 7. Docker 이미지 푸시
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/spring-demo


  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    steps:
      # 2. SSH 키 설정
      - name: Add SSH Key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Connect to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            # AWS CLI로 S3에서 파일 다운로드
            aws s3 cp s3://cicd-bucket-1004/5번.png /home/ec2-user/5번.png
          
            # 다운로드한 파일 존재 여부 확인
            if [ -f /home/ec2-user/5번.png ]; then
              echo "File downloaded successfully."
            else
              echo "File download failed."
            fi
          EOF